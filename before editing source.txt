#include<iostream>
#include"dlist.h"
#include<vector>
#include<string>
using namespace std;


template<class T>
class AVL;

template <class T>
class tnode             // class of tnode
{
	tnode *left;
	tnode *right;
	int height;
	int issn;
	dnode<T>* address;
public:
	tnode(int i = -1, dnode<T>* a = 0, tnode * l = nullptr, tnode * r = nullptr,int h=0)    // default constructor of tnode
	{
		left = l;
		right = r;
		height = h;
		issn = i;
		address = a;
	}
	void printTnodeData()        // prints data of tnode
	{
		cout << issn << endl;
		cout << address;
	}
	friend class AVL<T>;
};

template <class T>
class AVL              // class of binary search tree
{
	tnode<T> * root;
public:
	AVL()        // default constructor 
	{
		root = nullptr;
	}

	tnode<T>* search(int d)        // wrapper function for search function
	{
		return search(root, d);
	}

	tnode<T>* search(tnode<T> *r, int d)    // return the pointer of the node that contains d
										  //if search is successful otherwise return null 
	{
		if (r == nullptr || r->issn == d)
			return r;
		else if (r->issn > d)
			return search(r->left, d);
		else
			return search(r->right, d);
	}

	~AVL()         //wrapper destructor of AVL 
	{
		destroy(root);
	}

	void destroy(tnode<T> * r)   // actual destructor of AVL
	{
		if (r != nullptr)
		{
			destroy(r->left);
			destroy(r->right);
			delete r;
		}
	}

	void rotate_Right(tnode<T> *& x)         // rotate right base factor is 2
											 // ( insertion is made in left subtree of left child of x)
	{
		tnode<T> *y = x->left;
		x->left = y->right;
		y->right = x;
		y->height = max_height(height(y->left), height(y->right)) + 1;
		x->height = max_height(height(x->left), height(x->right)) + 1;
		x = y;
	}

	void rotate_Left(tnode<T> *& x)         // rotate Left function base factor is -2
											// ( insertion is made in right subtree of right child of x)
	{
		tnode<T> *y = x->right;
		x->right = y->left;
		y->left = x;
		y->height = max_height(height(y->left), height(y->right)) + 1;
		x->height = max_height(height(x->left), height(x->right)) + 1;
		x = y;
	}

	void double_Rotate_Right(tnode<T> *& x)    // double rotate right base factor is 2
											   // ( insertion is made in right subtree of left child of x)
	{
		rotate_Left(x->left);
		rotate_Right(x);
	}

	void double_Rotate_Left(tnode<T> *& x)    // double rotate left base factor is -2
											  // ( insertion is made in left subtree of right child of x)
	{
		rotate_Right(x->right);
		rotate_Left(x);
	}

	void insert(dnode<T>* add,int d)                  // wrapper function for insert function
	{
		return insert(root,add, d);
	}

	void insert(tnode<T> *& r, dnode<T>* add, int d)            // for inserting data in AVL BST
	{
		if (r == nullptr)
		{
			r = new tnode<T>(d,add);
			return;
		}
		if (d < r->issn)        // data is smaller than root 
		{
			insert(r->left,add, d);
			if (height(r->left) - height(r->right) == 2)   // case 1 or 3
			{
				if (d < r->left->issn)
					rotate_Right(r);
				else
					double_Rotate_Right(r);
			}
		}
		else
		{
			insert(r->right,add, d);      // data is greater than root
			if (height(r->left) - height(r->right) == -2)   // case 2 or 4
			{
				if (d > r->right->issn)
					rotate_Left(r);
				else
					double_Rotate_Left(r);
			}
		}
		r->height = 1 + max_height(height(r->left),height(r->right));      // update height of changed root
	}

	tnode<T>*  insert_for_new_book(dnode<T>* add, int d)                  // wrapper function for insert function
	{
		tnode<T>* result = insert_for_new_book(root, add, d);
		return result;
	}

	tnode<T> * insert_for_new_book(tnode<T> *& r, dnode<T>* add, int d)            // for inserting new book in AVL BST
	{
		if (r == nullptr)
		{
			r = new tnode<T>(d, add);
			return nullptr;
		}
		if (d < r->issn)        // data is smaller than root 
		{
			tnode<T>* temp = insert_for_new_book(r->left, add, d);
			if (height(r->left) - height(r->right) == 2)   // case 1 or 3
			{
				if (d < r->left->issn)
					rotate_Right(r);
				else
					double_Rotate_Right(r);
			}
			if (r->left->left == nullptr && r->left->right == nullptr)     // return parent of inserted data
				return r;
			else
				return temp;
		}
		else
		{
			tnode<T>* temp = insert_for_new_book(r->right, add, d);       // data is smaller than root 
			if (height(r->left) - height(r->right) == -2)   // case 2 or 4
			{
				if (d > r->right->issn)
					rotate_Left(r);
				else
					double_Rotate_Left(r);
			}
			if (r->right->right == nullptr && r->right->left == nullptr)  // return parent of inserted data
				return r;
			else
				return temp;
		}
		r->height = 1 + max_height(height(r->left),height(r->right));        // update height of changed root
	}

	void review(tnode<T> * a)       // wrapper function for reviweing a book
	{
		dnode<T> * b = a->address;
		cout<<b->data;
	}

	void list_update(dnode<T> * address, book b)    // insert new book at the addresss
	{
		address->data = b;
	}

	void update(tnode<T> * a)        // making changes in the desired book 
	{
		dnode<T> * b = a->address;
		vector<string> author;
		vector<string> title;
		string a1, a2, t;
		cout << "Enter new title: ";
		cin >> t;
		cout << "Enter new Author: ";
		cin >> a1;
		cin >> a2;
		book c = b->data;
		int issn = c.ISSN;
		author.push_back(a1);
		author.push_back(a1);
		title.push_back(t);
		book bu(issn, title, author, 100, 100);
		list_update(b, bu);        // make changes in the list as well
		cout << b->data;
	/*	vector<string> v;
		v.push_back(t);
		c.title = v;
		cout << c->data;*/

	}

	void view_books(int start,int end)     // show book in the given range
	{
		while (start <= end)
		{
			if (search(start))
			{
				tnode<book> * s = search(start);
				dnode<T> * b = s->address;
				cout << b->data;
			}
			start++;
		}
	}

	void new_book(int new_book_issn)        // add new book using issn
	{
		vector<string> author;
		vector<string> title;
		string a1, a2, t;
		cout << "Enter new title: ";
		cin >> t;
		cout << "Enter new Author: ";
		cin >> a1;
		cin >> a2;
		author.push_back(a1);
		author.push_back(a2);
		title.push_back(t);
		book bu(new_book_issn, title, author, 100, 100);
		tnode<T> * temp = insert_for_new_book(nullptr, new_book_issn);    // get address of parent
		dnode<T> * add;
		if (temp->issn< new_book_issn)      // at left of parent
		{
			add = dlist<T>::insert_after(bu, temp->address);
			temp->right->address = add;
		}
		else          // at right of parent
		{
			add = dlist<T>::insert_before(bu, temp->address);
			temp->left->address = add;
		}
	}

	int height(tnode<T> *n)      // gives height of given node
	{
		if (n == nullptr)
			return 0;
		return n->height;
	}

	int max_height(int h1, int h2)       // returns higher heigth between two heights
	{
		if (h1 > h2)
			return h1;
		return h2;
	}

	int balance_factor(tnode<T> *n)          // gives balance factor of a node
	{
		if (n == nullptr)
			return 0;
		return height(n->left) - height(n->right);
	}

	tnode<T> * get_min_value(tnode<T> *n)     // gives successor of node
	{
		tnode<T> *curr = n;
		while (curr->left != nullptr)
			curr = curr->left;
		return curr;
	}

	tnode<T> * remove_book(int data)        // wrapper for remove book from index
	{
		return remove_book(root, data);
	}
	 
	tnode<T> * remove_book(tnode<T> * root, int data)         // remove book from index
	{
		if (root == nullptr)
			return root;
		if (data < root->issn)
			root->left = remove_book(root->left, data);
		else if (data > root->issn)
			root->right = remove_book(root->right, data);
		else      // data to be deleted
		{
			if ((root->left == nullptr) && (root->right == nullptr))    // no child
			{
				delete root;
				root = nullptr;
			}
			else if (root->left == nullptr)       // one child(right)
			{
				tnode<T> *temp = root->right;
				*root = *temp;
				delete temp;
				temp = nullptr;
			}
			else if (root->right == nullptr)      // one child(left)
			{
				tnode<T> *temp = root->left;
				*root = *temp;
				delete temp;
				temp = nullptr;
			}
			//else                           // data to be removes has two child
			//{
			//	tnode<T> *curr = root->right;
			//	tnode<T> *prev2 = root;
			//	int flag = 0;
			//	while (curr->left != nullptr)    // finding min value ( successor)
			//	{
			//		prev2 = curr;
			//		curr = curr->left;
			//	}
			//	if (prev2 == root)         // if min is right of node to be removed 
			//	{
			//		root->issn = curr->issn;         // replacing data to be removed by min 
			//		root->right = curr->right;
			//		flag = 1;
			//	}
			//	if (flag == 0)						 // if min is not right of node to be removed 
			//	{
			//		root->issn = curr->issn;            // replacing data to be removed by min 
			//		if (curr->right != nullptr)   // if min has a child ( left of min is always null)
			//		{
			//			prev2->left = curr->right;
			//			delete curr;
			//			curr = nullptr;
			//		}
			//		else                         // if min has no child
			//		{
			//			prev2->left = nullptr;
			//			delete curr;
			//			curr = nullptr;
			//		}
			//	}
			//}

			else      // data to be removed has two childs
			{
				tnode<t> * temp = get_min_value(root->right);     // get successor 
				root->data = temp->data;                          
				root->right = remove_data(root->right, temp->data);     // remove successor
			}
		}

		//if (root == nullptr)                // for checking balancing
		//	return root;
		//root->height = 1 + max_height(height(root->left), height(root->right));
		//int bf = balance_factor(root);
		//if (bf > 1 && balance_factor(root->left) >= 0)				//rotate_right case
		//{
		//	rotate_right(root);
		//	return root;
		//}
		//																// double_rotate_right case 
		//else if (bf > 1 && balance_factor(root->left) < 0)
		//{
		//	double_rotate_right(root);
		//	return root;
		//}
		//																// rotate_left case 
		//else if (bf < -1 && balance_factor(root->right) <= 0)
		//{
		//	rotate_left(root);
		//	return root;
		//}
		//																// double_rotate_left case 
		//else if (bf < -1 && balance_factor(root->right) > 0)
		//{
		//	double_rotate_left(root);
		//	return root;
		//}
		return root;
	}

	void removeBook(int issn)      // function to remove a book from index
	{
		if (search(issn))
		{
			tnode<T> * temp = search(issn);
			dnode<T> * add = temp->address;
			remove_book(issn);                       // remove from avl
			dlist<T> :: remove_book_list(add);       // remove from list
		}
	}
};

class book           // class of books
{
	int ISSN;
	vector<string> title;
	vector<string> authors;
	int no_ref_books;
	int no_issuable_books;
public:
	friend ostream& operator<<(ostream &, book &);
	friend class dnode<book>;
	friend class AVL<book>;
	book()												 // default constructor of book
	{
		ISSN = -1;
		no_ref_books = -1;
		no_issuable_books = -1;

	}
	book(int issn, vector<string> t, vector<string> a,int r_books,int iss_books)	// parametric constructor of book
	{
		ISSN = issn;
		title = t;
		authors = a;
		no_ref_books = r_books;
		no_issuable_books = iss_books;
	}

	void print_book()              // function to print a book
	{
		cout << "ISSN = " << ISSN << endl;
		cout << "Title = " << title[0] << endl;
		cout << "Authors:-  " << endl;
		for (int i = 0; i < authors.size(); i++)
			cout << i+1 <<") " << authors[i] << " ";
		cout << endl;
		cout << "Number of Reference Books: " << no_ref_books << endl;
		cout << "Number of Issueable Books: " << no_issuable_books << endl;

	}

	book(const book &obj)   //deep copy constructor  w=t=v
	{
		ISSN = obj.ISSN;
		title = obj.title;
		authors = obj.authors;
		no_ref_books = obj.no_ref_books;
		no_issuable_books = obj.no_issuable_books;
	}
	book& operator=(const book &obj)   //   assignment operator
	{
		ISSN = obj.ISSN;
		title = obj.title;
		authors = obj.authors;
		no_ref_books = obj.no_ref_books;
		no_issuable_books = obj.no_issuable_books;
		return *this;
	}
	bool operator<(const book &obj)        // operator < for comparing two books
	{
		return(ISSN < obj.ISSN);
	}
	bool operator==(const book &obj)         // operator== for comparing two books
	{
		return (ISSN == obj.ISSN);
	}
	bool operator!=(const book &obj)          // operator =! for comparing two books
	{
		return (ISSN != obj.ISSN);
	}

};

ostream& operator<<(ostream &out, book &obj)         // operator << for printing book
{
	out << "ISSN = " << obj.ISSN << endl;
	out << "Title = " << obj.title[0] << endl;
	out << "Authors:-  " << endl;
	for (int i = 0; i < obj.authors.size(); i++)
		out << i + 1 << ") " << obj.authors[i] << " ";
	out << endl;
	out << "Number of Reference Books: " << obj.no_ref_books << endl;
	out << "Number of Issueable Books: " << obj.no_issuable_books << endl;
	return out;
}

int main()
{

	vector<string> author;
	vector<string> title;
	string a1 = "Saqib";
	string a2 = "Kamran";
	string t = "Life of a Computer Science Student";
	author.push_back(a1);
	author.push_back(a2);
	title.push_back(t);
	vector<string> author2;
	vector<string> title2;
	string a3 = "Atif";
	string a4 = "Ahmed";
	author2.push_back(a3);
	author2.push_back(a4);
	string t2 = "Life at FAST";
	title2.push_back(t2);
	vector<string> author3;
	vector<string> title3;
	string a5 = "Khurrum";
	string a6 = "Niaz";
	string t3 = "Introduction to C++";
	author3.push_back(a5);
	author3.push_back(a6);
	title3.push_back(t3);


	//cout << author[1]<< endl;
	book b(1,title , author,2,10);
	//b.print_book();
	//cout << endl;
	book b1(2,title2, author2, 4, 20);
	book b2(3, title3, author3, 6, 40);
	//b1.print_book();
	dlist<book> book_list;
	dnode<book> *  k= book_list.insertSorted(b1);
	dnode<book> *  k1 = book_list.insertSorted(b);
	dnode<book> *  k2 = book_list.insertSorted(b2);

//	book_list.printList();

	tnode<book> y(2, k, nullptr, nullptr, 0);
	//y.printTnodeData();
	//cout << endl;
	AVL<book> avl;           // Adding data in AVL Search Tree
	avl.insert(k, 2);
	avl.insert(k1, 1);
	avl.insert(k2, 3);


	int start = 1;
	int end = 4;
	
	tnode<book> * s2 = avl.search(3);
	cout << endl;
	//avl.review(s);
	//avl.update(s);
	//avl.view_books(start, end);

	int new_book_issn=4;
	avl.new_book(new_book_issn);
	avl.view_books(start, end);
	

	return 0;
}